class Solution {
public:
    vector<int> searchRange(vector<int>& a, int k) {
        vector<int> v(2, -1);
        if(a.size() == 0)
        {
            return v;
        }
        
        int n = 0;
        auto it = lower_bound(a.begin(), a.end(), k);
        if(it != a.end() && k == *it)
        {
            n = distance(a.begin(), it);
            v[0] = n;
        }
        it = upper_bound(a.begin(), a.end(), k);
        if(it != a.begin() && k == *(--it))
        {
            n = distance(a.begin(), it);
            v[1] = n;
        }
        return v;
    }
};
=============================================================
// class Solution {
// public:
//     vector<int> searchRange(vector<int>& a, int k) {
//         if (a.empty()) {
//             return {-1, -1};
//         }

//         vector<int> v(2, -1);
//         auto it = lower_bound(a.begin(), a.end(), k);

//         if (it != a.end() && *it == k) {
//             v[0] = distance(a.begin(), it); // Start position
//         }

//         it = upper_bound(a.begin(), a.end(), k);
//         if (it != a.begin() && *(--it) == k) {
//             v[1] = distance(a.begin(), it); // End position
//         }
//         return v;
//     }
// };
